{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFprocfwkMR"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/03-Child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADF.procfwk child pipeline used to execute Worker pipelines within a given execution stage. This pipeline will be called once for each stage, then execute all Workers in parallel.",
				"activities": [
					{
						"name": "Get Pipelines",
						"description": "Returns all pipelines from the metadata to be executed within a given processing stage.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetPipelinesInStage]",
								"storedProcedureParameters": {
									"StageId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Pipelines",
						"description": "Second level ForEach to run in parallel all pipelines within the stage. Items for iteration passed from the Get Pipelines lookup activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Pipelines",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pipelines').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline",
									"description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory. The function called will block processing and wait for an outcome.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Log Pipeline Running",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Get Pipeline Params",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Get SPN Details",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "ExecutePipelineV2",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\n\t\"tenantId\": \"',pipeline().parameters.TenantId,'\",\n\t\"applicationId\": \"',activity('Get SPN Details').output.firstRow.Id,'\",\n\t\"authenticationKey\": \"',activity('Get SPN Details').output.firstRow.Secret,'\",\n\t\"subscriptionId\": \"',pipeline().parameters.SubscriptionId,'\",\n\t\"resourceGroup\": \"MRPartnerResourceGroup\",\n\t\"factoryName\": \"',pipeline().DataFactory,'\",\n\t\"pipelineName\": \"',item().PipelineName,'\"',activity('Get Pipeline Params').output.firstRow.Params,'\n}')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "PipelineExecutor",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Pipeline Params",
									"description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[procfwk].[GetPipelineParameters]",
											"storedProcedureParameters": {
												"PipelineId": {
													"type": "Int32",
													"value": {
														"value": "@item().PipelineId",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "GetSetMetadata",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "Log Pipeline Running",
									"description": "Sets the current pipeline with a status of running within the current execution database table.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogPipelineRunning]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.ExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@item().PipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get SPN Details",
									"description": "Return the SPN ID and Secret for the processing pipeline being executed. Called at this level as each pipeline can have a different SPN.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[procfwk].[GetServicePrincipal]",
											"storedProcedureParameters": {
												"DataFactory": {
													"type": "String",
													"value": {
														"value": "ADFprocfwkMR",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@item().PipelineName",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "GetSetMetadata",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "Log Activity Failure",
									"description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Pipeline",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogActivityFailed]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.ExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@item().PipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Running Pipeline Handler",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-Infant",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"tenantId": {
												"value": "@pipeline().parameters.TenantId",
												"type": "Expression"
											},
											"applicationId": {
												"value": "@activity('Get SPN Details').output.firstRow.Id",
												"type": "Expression"
											},
											"authenticationKey": {
												"value": "@activity('Get SPN Details').output.firstRow.Secret",
												"type": "Expression"
											},
											"subscriptionId": {
												"value": "@pipeline().parameters.SubscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@item().ResourceGroupName",
												"type": "Expression"
											},
											"factoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"pipelineName": {
												"value": "@item().PipelineName",
												"type": "Expression"
											},
											"runId": {
												"value": "@activity('Execute Pipeline').output.RunId",
												"type": "Expression"
											},
											"executionId": {
												"value": "@pipeline().parameters.ExecutionId",
												"type": "Expression"
											},
											"stageId": {
												"value": "@pipeline().parameters.StageId",
												"type": "Expression"
											},
											"pipelineId": {
												"value": "@item().PipelineId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set Run Id",
									"description": "Provide the actual ADF run ID back to the current execution table for long term logging and alignment between the metadata other Azure monitoring tools.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogPipelineRunId]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.ExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@item().PipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunId": {
												"value": {
													"value": "@activity('Execute Pipeline').output.RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"StageId": {
						"type": "int"
					},
					"ExecutionId": {
						"type": "string"
					},
					"TenantId": {
						"type": "string"
					},
					"SubscriptionId": {
						"type": "string"
					}
				},
				"variables": {
					"FunctionBody": {
						"type": "String"
					}
				},
				"folder": {
					"name": "_ProcFwk"
				},
				"annotations": [
					"ADF.procfwk"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/04-Infant')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/04-Infant')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADF.procfwk infant pipeline used to check when the processing pipeline called by the Child completes and passes the resulting status back to the metadata database.",
				"activities": [
					{
						"name": "Wait Until Pipeline Completes",
						"description": "Loops until the pipeline called completes.\n\nSimple status:\n- Running = new iteration.\n- Done = break.",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Get Wait Duration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('Done',activity('Get Pipeline Status').output.SimpleStatus)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Pipeline Status",
									"description": "Checks the status of a given processing pipeline and provides the value for the downstream framework activities to act upon.",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "CheckPipelineStatus",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\n    \"tenantId\": \"',pipeline().parameters.TenantId,'\",\n    \"applicationId\": \"',pipeline().parameters.applicationId,'\",\n    \"authenticationKey\": \"',pipeline().parameters.authenticationKey,'\",\n    \"subscriptionId\": \"',pipeline().parameters.subscriptionId,'\",\n    \"resourceGroup\": \"MRPartnerResourceGroup\",\n    \"factoryName\": \"',pipeline().parameters.factoryName,'\",\n    \"pipelineName\": \"',pipeline().parameters.pipelineName,'\",\n    \"runId\": \"',pipeline().parameters.runId,'\"\n}')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "PipelineExecutor",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Wait If Running",
									"description": "True = Do nothing.\nFalse = Wait.",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Pipeline Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals('Done',activity('Get Pipeline Status').output.SimpleStatus)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait for Pipeline",
												"description": "The processing pipeline is still running so Wait before checking its status again.",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": {
														"value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Wait to Retry Function",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Get Pipeline Status",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Last Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Pipeline Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogPipelineLastStatusCheck]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Pipeline Result",
						"description": "Receives the outcome from the function execution for a given processing pipeline and updates the current execution table with different pipelines status values depending on the result (case).",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Wait Until Pipeline Completes",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('Get Pipeline Status').output.Status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Succeeded",
									"activities": [
										{
											"name": "Pipeline Status Succeeded",
											"description": "Updates the current execution table with a pipeline status of success if the function outcome is succeeded.",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[procfwk].[SetLogPipelineSuccess]",
												"storedProcedureParameters": {
													"ExecutionId": {
														"value": {
															"value": "@pipeline().parameters.executionId",
															"type": "Expression"
														},
														"type": "Guid"
													},
													"PipelineId": {
														"value": {
															"value": "@pipeline().parameters.pipelineId",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"StageId": {
														"value": {
															"value": "@pipeline().parameters.stageId",
															"type": "Expression"
														},
														"type": "Int32"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "SupportDatabase",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "Failed",
									"activities": [
										{
											"name": "Pipeline Status Failed",
											"description": "Updates the current execution table with a pipeline status of failed if the function outcome is failed. Also blocks pipelines in the downstream execution stage.",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[procfwk].[SetLogPipelineFailed]",
												"storedProcedureParameters": {
													"ExecutionId": {
														"value": {
															"value": "@pipeline().parameters.executionId",
															"type": "Expression"
														},
														"type": "Guid"
													},
													"PipelineId": {
														"value": {
															"value": "@pipeline().parameters.pipelineId",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"RunId": {
														"value": {
															"value": "@activity('Get Pipeline Status').output.RunId",
															"type": "Expression"
														},
														"type": "Guid"
													},
													"StageId": {
														"value": {
															"value": "@pipeline().parameters.stageId",
															"type": "Expression"
														},
														"type": "Int32"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "SupportDatabase",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Pipeline Status Unknown",
									"description": "Updates the current execution table with a pipeline status of unknown if the function returns an unexpected outcome.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogPipelineUnknown]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Get Wait Duration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
								"storedProcedureParameters": {
									"PropertyName": {
										"type": "String",
										"value": "PipelineStatusCheckDuration"
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference"
							}
						}
					}
				],
				"parameters": {
					"tenantId": {
						"type": "string"
					},
					"applicationId": {
						"type": "string"
					},
					"authenticationKey": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"resourceGroup": {
						"type": "string"
					},
					"factoryName": {
						"type": "string"
					},
					"pipelineName": {
						"type": "string"
					},
					"runId": {
						"type": "string"
					},
					"executionId": {
						"type": "string"
					},
					"stageId": {
						"type": "int"
					},
					"pipelineId": {
						"type": "int"
					}
				},
				"folder": {
					"name": "_ProcFwk"
				},
				"annotations": [
					"ADF.procfwk"
				]
			},
			"dependsOn": []
		}
	]
}